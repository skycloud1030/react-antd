{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onInputChange","e","setState","name","target","value","onChechChange","console","log","checked","state","className","gutter","xs","placeholder","this","onChange","xl","title","size","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAsDeA,G,kBA/Cb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAGRC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CAAEC,KAAMF,EAAEG,OAAOC,SALd,EAOnBC,cAAgB,SAAAL,GACdM,QAAQC,IAAR,oBAAyBP,EAAEG,OAAOK,WANlC,EAAKC,MAAQ,CAAEP,KAAM,IAFJ,E,sEAWjB,OACE,yBAAKQ,UAAU,OACb,kBAAC,IAAD,CAAKC,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,IACP,kBAAC,IAAD,CACEC,YAAY,cACZT,MAAOU,KAAKL,MAAMP,KAClBa,SAAUD,KAAKf,iBAGnB,kBAAC,IAAD,CAAKa,GAAI,IAAT,gBAA2BE,KAAKL,MAAMP,MACtC,kBAAC,IAAD,CAAKU,GAAI,IACP,kBAAC,IAAD,CAAUG,SAAUD,KAAKT,eAAzB,cAGJ,kBAAC,IAAD,CAAKM,OAAQ,IACX,kBAAC,IAAD,CAAKC,GAAI,GAAII,GAAI,IACf,kBAAC,IAAD,CAAMC,MAAM,qBACV,2CACA,2CACA,6CAGJ,kBAAC,IAAD,CAAKL,GAAI,GAAII,GAAI,IACf,kBAAC,IAAD,CAAME,KAAK,QAAQD,MAAM,mBACvB,2CACA,2CACA,mD,GAvCIE,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fbc8d2a9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, Input } from \"antd\";\nimport { Row, Col } from \"antd\";\nimport { Checkbox } from \"antd\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"\" };\n  }\n  onInputChange = e => {\n    this.setState({ name: e.target.value });\n  };\n  onChechChange = e => {\n    console.log(`checked = ${e.target.checked}`);\n  };\n  render() {\n    return (\n      <div className=\"app\">\n        <Row gutter={16}>\n          <Col xs={24}>\n            <Input\n              placeholder=\"Basic usage\"\n              value={this.state.name}\n              onChange={this.onInputChange}\n            />\n          </Col>\n          <Col xs={24}>Your input : {this.state.name}</Col>\n          <Col xs={24}>\n            <Checkbox onChange={this.onChechChange}>Checkbox</Checkbox>\n          </Col>\n        </Row>\n        <Row gutter={16}>\n          <Col xs={24} xl={12}>\n            <Card title=\"Default size card\">\n              <p>Card content</p>\n              <p>Card content</p>\n              <p>Card content</p>\n            </Card>\n          </Col>\n          <Col xs={24} xl={12}>\n            <Card size=\"small\" title=\"Small size card\">\n              <p>Card content</p>\n              <p>Card content</p>\n              <p>Card content</p>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"antd/dist/antd.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}