{"version":3,"sources":["data/badge.js","components/github-card/index.js","data/repositories.js","App.js","serviceWorker.js","index.js","App.module.css","components/github-card/index.module.css"],"names":["BadgeList","name","url","img","alt","React","memo","props","useState","data","setData","useEffect","map","item","href","className","styles","badge","key","src","repositories","Header","Layout","Content","Footer","App","onSelect","window","location","state","layout","logo","theme","mode","defaultSelectedKeys","style","lineHeight","this","Item","padding","row","gutter","xs","title","xxl","id","card","textAlign","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.054fb569.chunk.js","sourcesContent":["function BadgeList(name) {\n  return [\n    {\n      url: `https://travis-ci.org/skycloud1030/${name}`,\n      img: `https://api.travis-ci.org/skycloud1030/${name}.svg?branch=master`,\n      alt: \"Travis\"\n    },\n    {\n      url: `https://coveralls.io/github/skycloud1030/${name}?branch=master`,\n      img: `https://coveralls.io/repos/github/skycloud1030/${name}/badge.svg?branch=master`,\n      alt: \"Coverage Status\"\n    },\n    {\n      url: `https://www.npmjs.com/package/${name}`,\n      img: `https://img.shields.io/npm/v/${name}.svg`,\n      alt: \"Version\"\n    },\n    {\n      url: `https://github.com/skycloud1030/${name}/blob/master/LICENSE`,\n      img: `https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square`,\n      alt: \"license\"\n    },\n    {\n      url: `https://www.npmjs.com/package/${name}`,\n      img: `https://img.shields.io/npm/dm/${name}.svg`,\n      alt: \"Donloads\"\n    }\n  ];\n}\n\nexport default BadgeList;\n","import React, { useEffect, useState } from \"react\";\nimport styles from \"./index.module.css\";\n// import badge_list from \"../../data/badge.js\";\nimport BadgeList from \"../../data/badge.js\";\n\nfunction GithubCard(props) {\n  const { name } = props;\n  const [data, setData] = useState([]);\n \n  useEffect(() => {\n    const data = BadgeList(name) || [];\n    setData(data);\n  }, [name]);\n\n  return data.map(item => {\n    return (\n      <a href={item.url} className={styles.badge} key={item.alt}>\n        <img src={item.img} alt={item.alt} />\n      </a>\n    );\n  });\n}\n\nexport default React.memo(GithubCard);\n","const repositories = [\n  \"react-bootstrap-carousel\",\n  \"array-includes-any\",\n  \"react-shields-badge\",\n  \"react-selectlist\",\n  \"react-loadingmask\"\n];\n\nexport default repositories;\n","import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { Card } from \"antd\";\nimport { Row, Col } from \"antd\";\nimport { BackTop } from \"antd\";\nimport GithubCard from \"./components/github-card/index.js\";\nimport repositories from \"./data/repositories.js\";\nimport styles from \"./App.module.css\";\nconst { Header, Content, Footer } = Layout;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: \"\" };\n  }\n  onSelect = ({ key }) => {\n    window.location.href = `#${key}`;\n  };\n  render() {\n    return (\n      <Layout className={styles.layout}>\n        <Header>\n          <div className={styles.logo} />\n          <Menu\n            theme=\"dark\"\n            mode=\"horizontal\"\n            defaultSelectedKeys={[\"projects\"]}\n            style={{ lineHeight: \"64px\" }}\n            onSelect={this.onSelect}\n          >\n            <Menu.Item key=\"projects\">Projects</Menu.Item>\n          </Menu>\n        </Header>\n        <Content style={{ padding: \"0 50px\" }}>\n          <Row className={styles.row} gutter={16}>\n            <Col xs={24}>\n              <Card title=\"Projects\">\n                <ul>\n                  {repositories.map(item => {\n                    return (\n                      <li key={item}>\n                        <a href={`#${item}`}>{item}</a>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </Card>\n            </Col>\n          </Row>\n          <Row className={styles.row} gutter={16}>\n            {repositories.map(item => {\n              return (\n                <Col xs={24} xxl={8} key={item}>\n                  <Card title={item} id={item} className={styles.card}>\n                    <GithubCard name={item}></GithubCard>\n                  </Card>\n                </Col>\n              );\n            })}\n          </Row>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>CT Hung Â©2020</Footer>\n        <BackTop />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"antd/dist/antd.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"App_logo__1ZtW-\",\"row\":\"App_row__1K8Sd\",\"badge\":\"App_badge__1Blt6\",\"layout\":\"App_layout__34Q3a\",\"card\":\"App_card__HZOok\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"github-card_badge__2SCRg\"};"],"sourceRoot":""}